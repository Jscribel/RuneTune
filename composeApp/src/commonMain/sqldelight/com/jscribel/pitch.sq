CREATE TABLE pitch (
	note TEXT NOT NULL,
    octave INTEGER NOT NULL,
    frequency REAL NOT NULL
);

CREATE INDEX pitch_frequency ON pitch(frequency);

INSERT INTO pitch VALUES
("C",0,16.0),
("C♯/D♭",0,17.0),
("D",0,18.0),
("D♯/E♭",0,20.0),
("E",0,21.0),
("F",0,22.0),
("F♯/G♭",0,23.0),
("G",0,25.0),
("G♯/A♭",0,26.0),
("A",0,28.0),
("A♯/B♭",0,29.0),
("B",0,31.0),
("C",1,33.0),
("C♯/D♭",1,35.0),
("D",1,37.0),
("D♯/E♭",1,39.0),
("E",1,41.0),
("F",1,44.0),
("F♯/G♭",1,46.0),
("G",1,49.0),
("G♯/A♭",1,52.0),
("A",1,55.0),
("A♯/B♭",1,58.0),
("B",1,62.0),
("C",2,65.0),
("C♯/D♭",2,69.0),
("D",2,73.0),
("D♯/E♭",2,78.0),
("E",2,82.0),
("F",2,87.0),
("F♯/G♭",2,93.0),
("G",2,98.0),
("G♯/A♭",2,104.0),
("A",2,110.0),
("A♯/B♭",2,117.0),
("B",2,124.0),
("C",3,131.0),
("C♯/D♭",3,139.0),
("D",3,147.0),
("D♯/E♭",3,156.0),
("E",3,165.0),
("F",3,175.0),
("F♯/G♭",3,185.0),
("G",3,196.0),
("G♯/A♭",3,208.0),
("A",3,220.0),
("A♯/B♭",3,233.0),
("B",3,247.0),
("C",4,262.0),
("C♯/D♭",4,278.0),
("D",4,294.0),
("D♯/E♭",4,311.0),
("E",4,330.0),
("F",4,349.0),
("F♯/G♭",4,370.0),
("G",4,392.0),
("G♯/A♭",4,415.0),
("A",4,440.0),
("A♯/B♭",4,466.0),
("B",4,494.0),
("C",5,523.0),
("C♯/D♭",5,554.0),
("D",5,587.0),
("D♯/E♭",5,622.0),
("E",5,659.0),
("F",5,699.0),
("F♯/G♭",5,740.0),
("G",5,784.0),
("G♯/A♭",5,831.0),
("A",5,880.0),
("A♯/B♭",5,932.0),
("B",5,988.0),
("C",6,1047.0),
("C♯/D♭",6,1109.0),
("D",6,1175.0),
("D♯/E♭",6,1245.0),
("E",6,1319.0),
("F",6,1397.0),
("F♯/G♭",6,1475.0),
("G",6,1568.0),
("G♯/A♭",6,1661.0),
("A",6,1760.0),
("A♯/B♭",6,1865.0),
("B",6,1976.0),
("C",7,2093.0),
("C♯/D♭",7,2218.0),
("D",7,2349.0),
("D♯/E♭",7,2489.0),
("E",7,2637.0),
("F",7,2794.0),
("F♯/G♭",7,2960.0),
("G",7,3136.0),
("G♯/A♭",7,3322.0),
("A",7,3520.0),
("A♯/B♭",7,3729.0),
("B",7,3951.0),
("C",8,4186.0),
("C♯/D♭",8,4435.0),
("D",8,4699.0),
("D♯/E♭",8,4978.0),
("E",8,5274.0),
("F",8,5588.0),
("F♯/G♭",8,5920.0),
("G",8,6272.0),
("G♯/A♭",8,6645.0),
("A",8,7040.0),
("A♯/B♭",8,7459.0),
("B",8,7902.0);

getByKey:
SELECT *
FROM pitch
WHERE note = :note AND octave = :octave;

getByFrequency:
SELECT *
FROM pitch
WHERE frequency = :frequency;

getClosest:
SELECT * FROM pitch
ORDER BY ABS(:frequency - frequency)
LIMIT 1;
-- getNextByFrequency:
-- SELECT *
-- FROM pitch
-- WHERE frequency > :frequency
-- ORDER BY 3 ASC
-- LIMIT 1;
--
-- getPrevByFrequency:
-- SELECT *
-- FROM pitch
-- WHERE frequency < :frequency
-- ORDER BY 3 DESC
-- LIMIT 1;

getAll:
SELECT * FROM pitch;